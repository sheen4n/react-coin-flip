{"version":3,"sources":["assets/images sync /^/.//.*/.jpg$","assets/images/heads.jpg","assets/images/tails.jpg","Coin.js","CoinFlipper.js","App.js","serviceWorker.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","Coin","status","className","src","require","alt","CoinFlipper","useState","currentStatus","setCurrentStatus","headsCount","setHeadsCount","tailsCount","setTailsCount","onClick","Math","round","random","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wMAAA,IAAIA,EAAM,CACT,cAAe,GACf,cAAe,IAIhB,SAASC,EAAeC,GACvB,IAAIC,EAAKC,EAAsBF,GAC/B,OAAOG,EAAoBF,GAE5B,SAASC,EAAsBF,GAC9B,IAAIG,EAAoBC,EAAEN,EAAKE,GAAM,CACpC,IAAIK,EAAI,IAAIC,MAAM,uBAAyBN,EAAM,KAEjD,MADAK,EAAEE,KAAO,mBACHF,EAEP,OAAOP,EAAIE,GAEZD,EAAeS,KAAO,WACrB,OAAOC,OAAOD,KAAKV,IAEpBC,EAAeW,QAAUR,EACzBS,EAAOC,QAAUb,EACjBA,EAAeE,GAAK,I,gBCvBpBU,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,4FCa5BC,G,MAVF,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACd,OAAc,MAAVA,EAAuB,KAGzB,yBAAKC,UAAU,QACb,yBAAKC,IAAKC,MAAQ,YAAmBH,EAApB,SAAmCI,IAAI,YCuB/CC,EA5BK,WAAO,IAAD,EACkBC,mBAAS,MAD3B,mBACjBC,EADiB,KACFC,EADE,OAEYF,mBAAS,GAFrB,mBAEjBG,EAFiB,KAELC,EAFK,OAGYJ,mBAAS,GAHrB,mBAGjBK,EAHiB,KAGLC,EAHK,KAexB,OACE,6BACE,kDACA,kBAAC,EAAD,CAAMZ,OAAQO,IACd,4BAAQM,QAdQ,WACgB,IAA9BC,KAAKC,MAAMD,KAAKE,WAClBJ,EAAcD,EAAa,GAC3BH,EAAiB,WAEjBE,EAAcD,EAAa,GAC3BD,EAAiB,YAQjB,YACA,qCACUC,EAAaE,EADvB,2BAC2DF,EAAY,IADvE,aAEaE,EAFb,aCXSM,MARf,WACE,OACE,yBAAKhB,UAAU,OACb,kBAAC,EAAD,QCKciB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9aa2ce9f.chunk.js","sourcesContent":["var map = {\n\t\"./heads.jpg\": 13,\n\t\"./tails.jpg\": 14\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 12;","module.exports = __webpack_public_path__ + \"static/media/heads.99a10729.jpg\";","module.exports = __webpack_public_path__ + \"static/media/tails.43f803d7.jpg\";","import React from 'react';\nimport './Coin.css';\n\nconst Coin = ({ status }) => {\n  if (status == null) return null;\n\n  return (\n    <div className='Coin'>\n      <img src={require(`./assets/images/${status}.jpg`)} alt='coin' />\n    </div>\n  );\n};\n\nexport default Coin;\n","import React, { useState } from 'react';\nimport Coin from './Coin';\n\nconst CoinFlipper = () => {\n  const [currentStatus, setCurrentStatus] = useState(null);\n  const [headsCount, setHeadsCount] = useState(0);\n  const [tailsCount, setTailsCount] = useState(0);\n\n  const handleClick = () => {\n    if (Math.round(Math.random()) === 0) {\n      setTailsCount(tailsCount + 1);\n      setCurrentStatus('tails');\n    } else {\n      setHeadsCount(headsCount + 1);\n      setCurrentStatus('heads');\n    }\n  };\n\n  return (\n    <div>\n      <h1>Let's flip a coin!</h1>\n      <Coin status={currentStatus} />\n      <button onClick={handleClick}>Flip me!</button>\n      <p>\n        Out of {headsCount + tailsCount} flips, there have been {headsCount}{' '}\n        heads and {tailsCount} tails.\n      </p>\n    </div>\n  );\n};\n\nexport default CoinFlipper;\n","import React from 'react';\nimport './App.css';\nimport CoinFlipper from './CoinFlipper';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <CoinFlipper />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}